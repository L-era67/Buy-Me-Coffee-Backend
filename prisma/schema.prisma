// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  username  String @unique
  password String
  receivedDonations Donation[] @relation("ReceivedDonations")
  donations Donation[] @relation("Donation")
  profile Profile?
  profileId Int?
  bankCard BankCard?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id Int @id @default(autoincrement())
  name String
  about String?
  avatarImage String?
  socialMediaURL String?
  backgroundImage String?
  successMessage String?
  userId Int @unique
  user User @relation( fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id Int @id @default(autoincrement())
  amount Int
  specialMesssage String?
  socialURLOrBuyMeACoffee String?
  donorId Int
  donor User @relation("Donation", fields: [donorId], references: [id])
  user User @relation("ReceivedDonations", fields: [recipientId], references: [id])  
  recipientId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model BankCard {
    id Int @id @default(autoincrement())
    country String
    firstName String
    lastName String
    cardNumber String @unique
    expiryDate DateTime
    userId Int @unique
    user User @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


